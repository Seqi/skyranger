let fs = require('fs')
let util = require('util')
let expect = require('chai').expect

let xcomKeys = require('./data/xcom-object-keys')
let xcomFileReader = require('./utils/file-reader')

// We rely on the file reader to make our assertions in the tests,
// so ensure it's working as intended!
describe('XCOM file reader', () => {
	let testPoolBuffer
	let testSoldierBuffer

	before(async () => {
		let readFilePromise = util.promisify(fs.readFile)

		// This file was generated by exporting 2 soldiers from the
		// XCOM2 game so we can be sure of the validity of the file
		const poolData = await readFilePromise('test/data/TestPool.bin')
		testPoolBuffer = poolData

		// This file is a subset of a single soldier of the above
		const soldierData = await readFilePromise('test/data/TestSoldier.bin')
		testSoldierBuffer = soldierData
	})

	describe('header reader', () => {
		it('should read a valid header', () => {
			let poolVal = {
				name: 'CharacterPool',
				type: 'ArrayProperty',
				valSize: 4,
				val: 2
			}

			let fileNameVal = {
				name: 'PoolFileName',
				type: 'StrProperty',
				valSize: 42,
				val: 'CharacterPool\\Importable\\TestPool.bin'
			}

			let header = xcomFileReader(testPoolBuffer)
				.readHeader()

			expect(header).to.have.all.keys(xcomKeys.headerKeys)

			expect(header.SoldierCount).to.equal(2)
			expect(header.CharacterPool).to.deep.equal(poolVal)
			expect(header.PoolFileName).to.deep.equal(fileNameVal)
		})

		it('should throw on an invalid header', () => {
			let invalidHeader = Buffer.from([255, 0, 255, 255])

			expect(xcomFileReader(invalidHeader).readHeader).to.throw()
		})
	})

	describe('soldier reader', () => {
		it('should read a valid soldier', () => {
			let soldier = xcomFileReader(testSoldierBuffer)
				.readSoldier()

			expect(soldier).to.have.all.keys(xcomKeys.soldierKeys)

			Object.keys(soldier)
				.forEach(soldierKey => {
					expect(soldier[soldierKey]).to.have.all.keys(xcomKeys.propertyKeys)

					Object.keys(soldier[soldierKey])
						.forEach(propKey => {
							expect(soldier[soldierKey][propKey]).to.not.be.undefined
							expect(soldier[soldierKey][propKey]).to.not.be.null
						})
				})

			expect(soldier.strFirstName.val).to.equal('Test')
			expect(soldier.strNickName.val).to.equal('\'Test1\'')
			expect(soldier.strLastName.val).to.equal('Soldier')
			expect(soldier.BackgroundText.val).to.equal('Testing One.')
		})
	})

	describe('file reader', () => {
		it('should read the file', () => {
			let result = xcomFileReader(testPoolBuffer)
				.readFile()

			expect(result).to.have.all.keys(xcomKeys.headerKeys.concat('soldiers'))
			expect(result.soldiers).to.have.lengthOf(2)
		})
	})
})
